package com.example.course_service.config;

import org.apache.kafka.clients.admin.NewTopic;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.KafkaTemplate;

import com.example.course_service.model.Course;
import com.example.course_service.repository.CourseRepository;

@Configuration
public class KafkaConfig {

	@Bean
	public NewTopic classCreatedTopic() {
		return TopicBuilder.name("class-created")
							.build();
		
	}
	
	@Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory(
            ConsumerFactory<String, String> consumerFactory) {
        ConcurrentKafkaListenerContainerFactory<String, String> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory);
        return factory;
    }
	
	
	 @Bean
	    public Object userEnrolledListener(KafkaTemplate<String, String> kafkaTemplate) {
	        return new Object() {
	            @KafkaListener(topics = "user-enrolled", groupId = "course-group")
	            public void listen(String message) {
	                System.out.println("Received user enrolled event: " + message);
	               
	                String[] parts = message.split(",");
	                Long userId = Long.parseLong(parts[0]);
	                String name = parts[1];
	                String role = parts[2];

	                // Only create/assign course if it's a teacher
	                if (role.equals("TEACHER")) {
	                    Course course = new Course();
	                    course.setName("Default Course for " + name);
	                    course.setTeacherId(userId);  // SET teacherId here
	                    CourseRepository.save(course);

	                    System.out.println("Course created with teacherId: " + userId);
	                
	            }
	        };
	        }
	
	
}
