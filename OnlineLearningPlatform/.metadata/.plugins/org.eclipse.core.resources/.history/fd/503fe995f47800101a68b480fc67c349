package com.example.course_service.config;

import org.apache.kafka.clients.admin.NewTopic;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.KafkaTemplate;

@Configuration
public class KafkaConfig {

	@Bean
	public NewTopic classCreatedTopic() {
		return TopicBuilder.name("class-created")
							.build();
		
	}
	
	@Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory(
            ConsumerFactory<String, String> consumerFactory) {
        ConcurrentKafkaListenerContainerFactory<String, String> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory);
        return factory;
    }
	
	
	 @Bean
	    public Object userEnrolledListener(KafkaTemplate<String, String> kafkaTemplate) {
	        return new Object() {
	            @KafkaListener(topics = "user-enrolled", groupId = "course-group")
	            public void listen(String message) {
	                System.out.println("Received user enrolled event: " + message);
	               
	            }
	        };
	        }
	
	
}
